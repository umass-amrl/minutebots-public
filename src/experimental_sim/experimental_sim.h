// Copyright 2018 - 2019 jaholtz@cs.umass.edu
// College of Information and Computer Sciences,
// University of Massachusetts Amherst
//
//
// This software is free: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License Version 3,
// as published by the Free Software Foundation.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// Version 3 in the file COPYING that came with this distribution.
// If not, see <http://www.gnu.org/licenses/>.
// ========================================================================

#include <atomic>
#include <condition_variable>
#include <mutex>
#include <string>
#include <thread>
#include <vector>
#include <queue>

#include "messages_robocup_ssl_wrapper.pb.h"
#include "net/netraw.h"
#include "radio_protocol_wrapper.pb.h"
#include "experimental_sim/sim_state.h"
#include "state/world_state.h"
#include "state/position_velocity_state.h"
#include "util/random.h"
#include "thread_safe/thread_safe_queue.h"
#include "experimental_sim/simulator.h"

#ifndef SRC_EXPERIMENTAL_SIM_EXPERIMENTAL_SIM_H_
#define SRC_EXPERIMENTAL_SIM_EXPERIMENTAL_SIM_H_

namespace experimental_simulator {
class ExperimentalSim : public Simulator {
 public:
    ExperimentalSim(double step_time, SimState* world_state,
                    const unsigned int queue_size);

    ExperimentalSim(double step_time,
                    double current_time,
                    int frame_index,
                    SimState* world_state);
    ExperimentalSim();

    ~ExperimentalSim();

    Simulator* Copy() override;

    // Returns the current simulated world state as a set of SSL Packets
    std::vector<SSLVisionProto::SSL_WrapperPacket>
        GetSSLWrapperPackets() override;

    // Returns the current simulated world state as a soccer world state
    state::PositionVelocityState GetWorldState(const team::Team team) override;

    // Simulates a single time step with the given robot commands.
    void SimulateStep(const RadioProtocolWrapper& command) override;

    void SetFactors(MinuteBotsProto::FactorSettings settings) override;

    MinuteBotsProto::FactorTuningData GetFactorChanges() override;

 private:
    // Returns true if the given velocity command is legal
    bool ValidateVelocityCommandIntegrity(
        const RadioProtocolWrapper& velocity_command);

    void InitializeControlQueue(const unsigned int queue_size);
    RadioProtocolWrapper GetEmptyRadioCommand();

    // Environmental factors which can be adjusted.
    // The amount of time to simulate in an update.
    double step_time_;
    double ball_acceleration_;
    double localization_noise_stddev_;
    double angle_localization_noise_stddev_;
    // The current time in the simulation
    double current_time_;
    // Frame number generated by this simulator
    int frame_index_;

    // queue of control commands
    std::queue<RadioProtocolWrapper> control_queue_;

    // A random generator used by the simulator.
    util_random::Random random_;

    // Contains the simulated world_state_
    SimState* world_state_;

    RadioProtocolWrapper last_command_;

    MinuteBotsProto::FactorTuningData factor_data_;
};
}  // namespace experimental_simulator

#endif  // SRC_EXPERIMENTAL_SIM_EXPERIMENTAL_SIM_H_
